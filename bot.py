import telebot
import config
import sqlite3

bot = telebot.TeleBot(config.TOKEN)
conn = sqlite3.connect("SecretSanta.db", check_same_thread=False)
cursor = conn.cursor()
new_user = {}


@bot.message_handler(commands=['start'])
def start_command(message):
    if message.chat.id != config.MY_ID:
        if (message.chat.id,) not in cursor.execute("SELECT id FROM main").fetchall():
            new_user[message.chat.id] = {'sex': '',
                                         'name_sur': '',
                                         'class': '',
                                         'wishes': '',
                                         'would_sex': ''}
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(
                telebot.types.InlineKeyboardButton(
                    '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—Éüë®üèª‚Äçüíª', url='telegram.me/ttema4'
                )
            )
            bot.send_message(
                message.chat.id,
                '–ü—Ä–∏–≤–µ—Çüëãüèª –≠—Ç–æ —Ç–∞–π–Ω—ã–π —Å–∞–Ω—Ç–∞!\n\n'
                '–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å,\n'
                '–ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n\n'
                '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚§µÔ∏è', reply_markup=keyboard
            )
            keyboard2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            buttons = ["–Ø –º–∞–ª—å—á–∏–∫ üßëüèª", "–Ø –¥–µ–≤–æ—á–∫–∞ üë©üèª"]
            keyboard2.add(*buttons)
            bot.send_message(
                message.chat.id,
                '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª', reply_markup=keyboard2
            )
            bot.register_next_step_handler(message, get_sex)
        else:
            keyboard = telebot.types.InlineKeyboardMarkup()
            keyboard.add(
                telebot.types.InlineKeyboardButton(
                    '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—Éüë®üèª‚Äçüíª', url='telegram.me/ttema4'
                )
            )
            bot.send_message(message.from_user.id, '–í—ã –≤ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π!\n'
                                                   '–í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚§µÔ∏è', reply_markup=keyboard)
            bot.register_next_step_handler(message, wait_news)
    else:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton(
                '–ó–∞—è–≤–∫–∏', callback_data='admin-apl')
        )
        keyboard.add(
            telebot.types.InlineKeyboardButton(
                '–†–∞—Å—Å—ã–ª–∫–∞', callback_data='admin-malling')
        )
        keyboard.add(
            telebot.types.InlineKeyboardButton(
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin-statistic')
        )
        keyboard.add(
            telebot.types.InlineKeyboardButton(
                '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='admin-start_game')
        )
        bot.send_message(message.chat.id, '‚öôÔ∏è ADMIN MENU ‚öôÔ∏è', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data.startswith('admin-'):
        if call.data == 'admin-apl':
            if not len(cursor.execute("SELECT * FROM main").fetchall()):
                bot.send_message(call.message.chat.id, '–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç!',
                                 reply_markup=telebot.types.ReplyKeyboardRemove())
                start_command(call.message)
            else:
                el = cursor.execute("SELECT * FROM main").fetchone()
                keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                buttons = ["–û–¥–æ–±—Ä–∏—Ç—å ‚úÖ", "–£–¥–∞–ª–∏—Ç—å ‚ùå"]
                keyboard.add(*buttons)
                bot.send_message(call.message.chat.id, f'üîπ–°—Å—ã–ª–∫–∞: tg://user?id={el[0]}\n'
                                                       f'üîπid: {el[0]}\n'
                                                       f'üîπ–ü–æ–ª: {el[1]}\n'
                                                       f'üîπ–ò–º—è: {el[2]}\n'
                                                       f'üîπ–ö–ª–∞—Å—Å: {el[3]}\n'
                                                       f'üîπ–ü–æ–∂–µ–ª–∞–Ω–∏—è: {el[4]}\n'
                                                       f'üîπ–ö–æ–º—É: {el[5]}\n\n'
                                                       f'–û—Å—Ç–∞–ª–æ—Å—å: {len(cursor.execute("SELECT * FROM main").fetchall())}',
                                 reply_markup=keyboard)
                bot.register_next_step_handler(call.message, check_apl)
        elif call.data == 'admin-malling':
            malling(call.message)
        elif call.data == 'admin-statistic':
            statistic(call.message)
        elif call.data == 'admin-start_game':
            bot.send_message(call.message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã?\n'
                                                   '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "yes"')
            bot.register_next_step_handler(call.message, start_game)


def start_game(message):
    if message.text == 'yes':
        peop = cursor.execute("SELECT * FROM final").fetchall()
        last = rec_search(message, 0, peop.copy())
        print(last[2], '->', peop[0][2])
        bot.send_message(last[0], f'üéâ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n'
                                  f'–¢–µ–±–µ –ø–æ–ø–∞–ª—Å—è {peop[0][2]}.\n'
                                  f'–û–Ω —É—á–∏—Ç—Å—è –≤ {peop[0][3]}. –ö —Å–ª–æ–≤—É, –æ–Ω –æ—Å—Ç–∞–≤–∏–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è: {peop[0][4]}.\n'
                                  f'–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –∏–≥—Ä–∞! üéâ')
        bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!')
    start_command(message)


def rec_search(message, id, peoples):
    if len(peoples) == 1:
        return peoples[0]
    for n_id, el in enumerate(peoples):
        if n_id != id and peoples[id][5].split('-')[1] == peoples[n_id][1].split('-')[1]:
            print(peoples[id][2], '->', peoples[n_id][2])
            a = peoples[n_id]
            del (peoples[id])
            n_id = peoples.index(a)
            return rec_search(message, n_id, peoples)
    else:
        for n_id, el in enumerate(peoples):
            if n_id != id:
                print(peoples[id][2], '->', peoples[n_id][2])
                bot.send_message(peoples[id][0], f'–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n'
                                                 f'–ò—Ç–∞–∫, —Ç—ã –¥–∞—Ä–∏—à—å –ø–æ–¥–∞—Ä–∫–∏ —á–µ–ª–æ–≤–µ–∫—É, '
                                                 f'–∫–æ—Ç–æ—Ä–æ–≥–æ –∑–æ–≤—É—Ç {peoples[n_id][2]}.\n'
                                                 f'–û–Ω —É—á–∏—Ç—Å—è –≤ {peoples[n_id][3]}. –ö —Å–ª–æ–≤—É, '
                                                 f'–æ–Ω –æ—Å—Ç–∞–≤–∏–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è: {peoples[n_id][4]}.\n'
                                                 f'–î–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –∏–≥—Ä–∞!')
                a = peoples[n_id]
                del (peoples[id])
                n_id = peoples.index(a)
                return rec_search(message, n_id, peoples)


def statistic(message):
    bot.send_message(message.chat.id, f'üîπ–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(cursor.execute("SELECT * FROM final").fetchall())}\n'
                                      f'üîπ–ó–∞—è–≤–æ–∫: {len(cursor.execute("SELECT * FROM main").fetchall())}\n')
    start_command(message)


def malling(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
    bot.register_next_step_handler(message, send_malling)


def send_malling(message):
    for el in cursor.execute("SELECT id FROM main").fetchall():
        bot.send_message(el[0], message.text)

    for el in cursor.execute("SELECT id FROM final").fetchall():
        bot.send_message(el[0], message.text)

    start_command(message)


def check_apl(message):
    el = cursor.execute("SELECT * FROM main").fetchone()
    if message.text.startswith('–û'):
        cursor.execute("INSERT INTO final VALUES (?, ?, ?, ?, ?, ?)", tuple(el))
        conn.commit()
        bot.send_message(str(el[0]), '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! ‚úÖ')
    else:
        bot.send_message(str(el[0]), '–í–∞—à–∞ –±—ã–ª–∞ –∞–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞ =(\n'
                                     '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏ –ø–æ–º–æ—â–∏ /start')
    cursor.execute("DELETE FROM main WHERE id = ?", (el[0],))
    conn.commit()
    if len(cursor.execute("SELECT * FROM main").fetchall()):
        el = cursor.execute("SELECT * FROM main").fetchone()
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–û–¥–æ–±—Ä–∏—Ç—å ‚úÖ", "–£–¥–∞–ª–∏—Ç—å ‚ùå"]
        keyboard.add(*buttons)
        bot.send_message(message.chat.id, f'üîπ–°—Å—ã–ª–∫–∞: tg://user?id={el[0]}\n'
                                          f'üîπid: {el[0]}\n'
                                          f'üîπ–ü–æ–ª: {el[1]}\n'
                                          f'üîπ–ò–º—è: {el[2]}\n'
                                          f'üîπ–ö–ª–∞—Å—Å: {el[3]}\n'
                                          f'üîπ–ü–æ–∂–µ–ª–∞–Ω–∏—è: {el[4]}\n'
                                          f'üîπ–ö–æ–º—É: {el[5]}\n\n'
                                          f'–û—Å—Ç–∞–ª–æ—Å—å: {len(cursor.execute("SELECT * FROM main").fetchall())}',
                         reply_markup=keyboard)
        bot.register_next_step_handler(message, check_apl)
    else:
        bot.send_message(message.chat.id, '–ë–æ–ª—å—à–µ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç!', reply_markup=telebot.types.ReplyKeyboardRemove())
        start_command(message)


def get_sex(message):
    global new_user
    if message.text in ["–Ø –º–∞–ª—å—á–∏–∫ üßëüèª", "–Ø –¥–µ–≤–æ—á–∫–∞ üë©üèª"]:
        if message.text.startswith('–Ø –º–∞–ª'):
            new_user[message.chat.id]['sex'] = 'sex-man'
        else:
            new_user[message.chat.id]['sex'] = 'sex-girl'
        bot.send_message(
            message.chat.id,
            '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?\n'
            '‚ùï –ü—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"')
        bot.register_next_step_handler(message, get_name)
    else:
        keyboard2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ["–Ø –º–∞–ª—å—á–∏–∫ üßëüèª", "–Ø –¥–µ–≤–æ—á–∫–∞ üë©üèª"]
        keyboard2.add(*buttons)
        bot.send_message(
            message.chat.id,
            '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª', reply_markup=keyboard2
        )
        bot.register_next_step_handler(message, get_sex)


def get_name(message):
    global new_user
    if len(message.text.split()) != 2:
        bot.send_message(
            message.chat.id,
            '‚ùå –ü–∏—à–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–º–µ–Ω–∞ –∏ —Ñ–∞–º–∏–ª–∏—é\n\n'
            '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?\n'
            '‚ùï –ü—Ä–∏–º–µ—Ä: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"'
        )
        bot.register_next_step_handler(message, get_name)
    else:
        new_user[message.chat.id]['name_sur'] = message.text.capitalize()
        bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ?\n'
                                               '‚ùï –ü—Ä–∏–º–µ—Ä: "10–∞"')
        bot.register_next_step_handler(message, get_class)


def get_class(message):
    global new_user
    if not message.text[-1].isalpha() or not message.text[:-1].isdigit():
        bot.send_message(message.from_user.id, '‚ùå –ü–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª–∞—Å—Å\n\n'
                                               '–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ?\n'
                                               '‚ùï –ü—Ä–∏–º–µ—Ä: "10–∞"')
        bot.register_next_step_handler(message, get_class)
    else:
        new_user[message.chat.id]['class'] = message.text.capitalize()
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–∞—Ä–∏—Ç—å –≤–∞–º\n'
                                               '‚ùï –ï—Å–ª–∏ —É –≤–∞—Å –Ω–∞ —á—Ç–æ-—Ç–æ –∞–ª–ª–µ—Ä–≥–∏—è —Å—Ç–æ–∏—Ç —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å')
        bot.register_next_step_handler(message, get_wishes)


def get_wishes(message):
    global new_user
    new_user[message.chat.id]['wishes'] = message.text
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ["–ú–∞–ª—å—á–∏–∫—É üßëüèª", "–î–µ–≤–æ—á–∫–µ üë©üèª"]
    keyboard.add(*buttons)
    bot.send_message(message.from_user.id, '–ö–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–∞—Ä–∏—Ç—å?\n'
                                           '–°–∏—Å—Ç–µ–º–∞ —É—á—Ç—ë—Ç –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è', reply_markup=keyboard)
    bot.register_next_step_handler(message, get_would_sex)


def get_would_sex(message):
    global new_user
    if message.text in ["–ú–∞–ª—å—á–∏–∫—É üßëüèª", "–î–µ–≤–æ—á–∫–µ üë©üèª"]:
        if message.text.startswith('–ú–∞–ª'):
            new_user[message.chat.id]['would_sex'] = 'would-man'
        else:
            new_user[message.chat.id]['would_sex'] = 'would-girl'
        write_new_user(message)
    else:
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ["–ú–∞–ª—å—á–∏–∫—É üßëüèª", "–î–µ–≤–æ—á–∫–µ üë©üèª"]
        keyboard.add(*buttons)
        bot.send_message(message.from_user.id, '‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n\n'
                                               '–ö–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–∞—Ä–∏—Ç—å?\n'
                                               '(–ú—ã –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, –Ω–æ —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è)', reply_markup=keyboard)
        bot.register_next_step_handler(message, get_would_sex)


def write_new_user(message):
    cursor.execute("INSERT INTO main VALUES (?, ?, ?, ?, ?, ?)",
                   [message.chat.id] + list(new_user[message.chat.id].values()))
    conn.commit()
    bot.send_message(message.chat.id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ')
    bot.send_message(config.MY_ID, '‚ùóÔ∏è–£ –≤–∞—Å +1 –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞!')
    bot.register_next_step_handler(message, wait_news)


@bot.message_handler()
def wait_news(message):
    if (message.chat.id,) not in cursor.execute("SELECT id FROM main").fetchall():
        start_command(message)
    else:
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(
            telebot.types.InlineKeyboardButton(
                '–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—Éüë®üèª‚Äçüíª', url='telegram.me/ttema4'
            )
        )
        bot.send_message(message.from_user.id, '–í—ã –≤ –∏–≥—Ä–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–µ–π!\n'
                                               '–í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚§µÔ∏è', reply_markup=keyboard)
        bot.register_next_step_handler(message, wait_news)


bot.polling(none_stop=True)
